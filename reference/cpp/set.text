---[ def ]---

A set is an associative container in C++ that stores unique elements in a specific order.
It is implemented as a balanced binary search tree (usually a red-black tree) to maintain efficient insertion, deletion, and search operations.
Sets do not allow duplicate elements.

---[ header ]---

#include <set>

---[ creation ]---

std::set<int> Oset;

---[ Inserting elements ]---

Oset.insert(element);

---[ Iterating through the set ]---

for (const auto& element : Oset) {
    std::cout << element << " ";
}

---[ Finding an element ]---

auto iter = Oset.find(target);
if (iter != Oset.end()) {
    std::cout << "Element " << target << " found in the set." << std::endl;
} else {
    std::cout << "Element " << target << " not found in the set." << std::endl;
}


---[ Erasing elements ]---

Oset.erase(5);

---[ Inserting a range of elements ]---

std::vector<int> elementsToAdd = {7, 2, 10};
Oset.insert(elementsToAdd.begin(), elementsToAdd.end());

---[ Displaying the size of the set ]---

std::cout << "Set size: " << Oset.size() << std::endl;

---[ Clearing the set ]---

Oset.clear();
std::cout << "Set size after clearing: " << Oset.size() << std::endl;


